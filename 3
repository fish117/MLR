##################################
# LOGISTIC REGRESSION EXAMPLE
# Logistic regression with multiple explanatory variables
# Instructor: Martha Essak
# Jan. 14, 2018
##################################

mydata <- read.csv(file.choose(), header=TRUE)

str(mydata)

# Research question: Can you predict low payment performance on loans?
# Data is from bank loans issued withint a 3-days period with a final maturity of 2 years. 

# past.due = coded as 1 is the loan payment is past due, 0 otherwise
# CBS.score = score generated by the CSC Credit Reporting agency. Higher values indicate better credit ratings
# debt = debt ratio; required monthly payments on all debt / gross monthly income. This represents the amount of the applican't income that will go toward repayment of debt.
# gross.income = gross monthly income of the applicant ($)
# loan.amount = amount of the loan ($)

#######################
# DATA SUMMARY
#######################


table(mydata$past.due) # 150 loans past due, 198 re-paid on time

table(mydata$past.due)/nrow(mydata) # as proportions

summary(mydata)

#######################
# DATA VISUALIZATION
#######################

# Describe the relationship you see in each of the following plots:

plot(past.due ~ CBS.score, data=mydata, pch=16)
lines(lowess(mydata$CBS.score, mydata$past.due))


plot(past.due ~ debt, data=mydata, pch=16)
lines(lowess(mydata$debt, mydata$past.due))


plot(past.due ~ gross.income, data=mydata, pch=16)
lines(lowess(mydata$gross.income, mydata$past.due))


plot(past.due ~ loan.amount, data=mydata, pch=16)
lines(lowess(mydata$loan.amount, mydata$past.due))

#######################################
# SIMPLE LOGISTIC REGRESSION MODELS
#######################################

z.null <- glm(past.due ~ 1, data=mydata, family="binomial"(link="logit"))

z.CBS.score <- glm(past.due ~ CBS.score, data=mydata, family="binomial"(link="logit"))
summary(z.CBS.score)#reject
anova(z.null, z.CBS.score, test="Chi")

z.debt <- glm(past.due ~ debt, data=mydata, family="binomial"(link="logit"))
summary(z.debt)#fail
anova(z.null, z.debt, test="Chi")#deviation of variance
#Deviance???variance of likelihood test 
z.gross.income <- glm(past.due ~ gross.income, data=mydata, family="binomial"(link="logit"))
summary(z.gross.income)#reject
anova(z.null, z.gross.income, test="Chi")

z.loan.amount <- glm(past.due ~ loan.amount, data=mydata, family="binomial"(link="logit"))
summary(z.loan.amount)#reject H0
anova(z.null, z.loan.amount, test="Chi")



# Which variables would you like to use in a model together?
#????????????????????????reject ???????????????
#???????????????debt????????????????????????,?????????????????????????????????

#######################################

z.full <- glm(past.due ~ CBS.score + gross.income + loan.amount, data=mydata, family="binomial"(link="logit"))
summary(z.full)
#?????????categorical varible?????????interaction ???
#deviance comes from likelihood ratio test, G
drop1(z.full, test="Chi")
#??????drop??????,???P-value,???drop gross income.
z.drop.CBS.score <- glm(past.due ~ gross.income + loan.amount, data=mydata, family="binomial"(link="logit"))
anova(z.drop.CBS.score, z.full, test="Chi")

z.drop.gross.income <- glm(past.due ~ CBS.score + loan.amount, data=mydata, family="binomial"(link="logit"))
anova(z.drop.gross.income, z.full, test="Chi")
#?????????P??????z.drop??????,??????drop???gross income
z.drop.loan.amount <- glm(past.due ~ CBS.score + gross.income, data=mydata, family="binomial"(link="logit"))
anova(z.drop.loan.amount, z.full, test="Chi")
#????????????category  varible,?????????????????????drop??????,????????????????????????

AIC(z.full)
AIC(z.drop.CBS.score)
AIC(z.drop.gross.income) 
AIC(z.drop.loan.amount)
#lower value AIC ??????
#AIC??????????????????,??????drop income
z.final <- glm(past.due ~ CBS.score + loan.amount, data=mydata, family="binomial"(link="logit"))

###########################
# Visualizing the model
###########################


# Create a plot of the model fit in the original units

# Minimum CBS.score
loan.amount <- seq(min(mydata$loan.amount), max(mydata$loan.amount), length.out = 100) # create 100 new x-values
loan.amount
CBS.score <- rep(min(mydata$CBS.score), 100)
CBS.score
xnew <- as.data.frame(cbind(loan.amount, CBS.score))
xnew

ynew.pred.min <- data.frame(predict(z.final, newdata =  xnew, type="response")) # get the predicted values, not that the "newdata" is "xnew" because "xnew" is the name of the dataframe. The variable names in xnew MUST match the variable names in the original dataset.
ynew.pred.min
is.data.frame(ynew.pred.min)

names(ynew.pred.min) <- c("response")
ynew.pred.min
ynew.pred.min$response

# Maximum CBS.score
CBS.score <- rep(max(mydata$CBS.score), 100)
CBS.score
xnew <- as.data.frame(cbind(loan.amount, CBS.score))
xnew

ynew.pred.max <- data.frame(predict(z.final, newdata =  xnew, type="response"))
names(ynew.pred.max) <- c("response")

# Mean CBS.score
CBS.score <- rep(mean(mydata$CBS.score), 100)
CBS.score
xnew <- as.data.frame(cbind(loan.amount, CBS.score))
xnew

ynew.pred.mean <- data.frame(predict(z.final, newdata =  xnew, type="response"))
names(ynew.pred.mean) <- c("response")

# PLOT
plot(past.due ~ loan.amount, data = mydata, ylab = "Loan repayment (1 = past due)", xlab = "Loan amount ($)")
lines(ynew.pred.min$response ~ xnew$loan.amount, col="blue")
lines(ynew.pred.max$response ~ xnew$loan.amount, col="red")
lines(ynew.pred.mean$response ~ xnew$loan.amount, col="forestgreen")
text(locator(1), labels=c("CBS score = 508"), col="blue")
text(locator(1), labels=c("CBS score = 804"), col="red")
text(locator(1), labels=c("CBS score = 692.64"), col="forestgreen")
#????????????text
abline(0.4310345, 0, lty=2) # average for the population




abline(0.4310345, 0, lty=2) # average for the population

plot(past.due ~ loan.amount, data = mydata, ylab = "Loan repayment (1 = past due)", xlab = "Loan amount ($)")
lines(ynew.pred.min$response ~ xnew$loan.amount, col="blue")
lines(ynew.pred.max$response ~ xnew$loan.amount, col="red")
lines(ynew.pred.mean$response ~ xnew$loan.amount, col="forestgreen")

legend(locator(1), legend=c("CBS score = 508", "CBS score = 692.64", "CBS score = 804"),
       col=c("blue", "forestgreen", "red"), lty=1, cex=0.8)



# Now create a plot of past.due vs. CBS score. Add 14 lines representing the model fit for loan amounts ranging from $100 to $14 000 in $1000 increments.
# Use a loop to generate the model fit values

# Once you have your graph, add the overall proportion of past due loans to the graph
# If someone's CBS score is 700, what is the approximate loan value they could have to have the probability of paying it off equal to the overall probability? What if their CBS score is 750?
plot(past.due ~ CBS.score, data = mydata, ylab = "Loan repayment (1 = past due)", xlab = "CBS.Score")
for (i in 1:14) {
  # mean loan.amount
  loan.amount<- rep(1000*i,100)
  loan.amount
  nrow(mydata)
  length(loan.amount)
  CBS.score<- seq(min(mydata$CBS.score), max(mydata$CBS.score),length.out = 100) # create 100 new x-values
  CBS.score
  length(CBS.score)
  xnew <- as.data.frame(cbind(loan.amount,CBS.score))
  xnew
  
  ynew.pred.mean <- data.frame(predict(z.final, newdata =  xnew, type="response"))
  names(ynew.pred.mean) <- c("response")
  
 
  lines(ynew.pred.mean$response ~ xnew$CBS.score, col="red")

  
  legend(locator(1), legend=c("CBS score"),
         col=i, lty=1, cex=0.8)
}
abline(0.4310345, 0, lty=2) # average for the population

CBS.score <- seq(min(mydata$CBS.score), max(mydata$CBS.score), length.out = 100) # create 100 new x-values
CBS.score

#??????CBS.SCORE

loan.amountrange <-seq(1000,14000, by=1000)
loan.amountrange


plot(past.due ~ CBS.score, data = mydata, ylab = "Loan repayment (1 = past due)", xlab = "CBS Score")

for (i in 1:14)
{
  loan.amount<-rep(loan.amountrange[i],100)
  #loan.amount
  xnew <- as.data.frame(cbind(CBS.score, loan.amount))
  xnew
  ynew.pred<- data.frame(predict(z.final, newdata =  xnew, type="response")) # get the predicted values, not that the "newdata" is "xnew" because "xnew" is the name of the dataframe. The variable names in xnew MUST match the variable names in the original dataset.
  ynew.pred
  is.data.frame(ynew.pred.min)
  names(ynew.pred) <- c("response")
  ynew.pred
  ynew.pred$response
  
  lines(ynew.pred$response ~ xnew$CBS.score, col=i)
  
}
